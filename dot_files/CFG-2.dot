digraph Test {

   n1   [label="6:  Test ()"];
   n2   [label="7:  str = 'init'"];
   n3   [label="10:  String getString()"];
   n4   [label="11:  if (str == null)"];
   n5   [label="12:  str = ''"];
   n6   [label="endif"];
   n7   [label="13:  return str;"];
   n8   [label="16:  void setString(String s)"];
   n9   [label="17:  str = s"];
   n10   [label="20:  boolean isPrime(int x)"];
   n11   [label="21:  int[] primes = {2, 3, 5, 7, 11, 13, 17, 19}"];
   n12   [label="22:  for (int p: primes)"];
   n13   [label="endfor"];
   n14   [label="23:  if (x == p)"];
   n15   [label="24:  return true;"];
   n16   [label="endif"];
   n17   [label="26:  return false;"];
   n18   [label="29:  void test1(int n)"];
   n19   [label="30:  int i = 0"];
   n20   [label="30:  for (i < n)"];
   n21   [label="30:  ++i"];
   n22   [label="endfor"];
   n23   [label="31:  if (isPrime(i))"];
   n24   [label="32:  System.out.println(i)"];
   n25   [label="endif"];
   n26   [label="34:  continue;"];
   n27   [label="38:  void test2(int n)"];
   n28   [label="39:  int counter = n"];
   n29   [label="40:  do"];
   n30   [label="46:  while (counter > 2)"];
   n31   [label="end-do-while"];
   n32   [label="41:  if (isPrime(counter))"];
   n33   [label="42:  System.out.println(counter)"];
   n34   [label="43:  break;"];
   n35   [label="endif"];
   n36   [label="45:  --counter"];
   n37   [label="49:  void test3(int x, int y)"];
   n38   [label="50:  int res"];
   n39   [label="51:  if (x > y)"];
   n40   [label="52:  res = x - y"];
   n41   [label="53:  System.out.println('x-y=' + res)"];
   n42   [label="54:  res = x / y"];
   n43   [label="55:  System.out.println('x/y=' + res)"];
   n44   [label="56:  res = x % y"];
   n45   [label="57:  System.out.println('x%y=' + res)"];
   n46   [label="endif"];
   n47   [label="59:  res = x + y"];
   n48   [label="60:  System.out.println('x+y=' + res)"];
   n49   [label="61:  res = x * y"];
   n50   [label="62:  System.out.println('x*y=' + res)"];
   n51   [label="66:  void test4()"];
   n52   [label="67:  int i = 0"];
   n53   [label="68:  while (i < 10)"];
   n54   [label="endwhile"];
   n55   [label="69:  i += 2"];
   n56   [label="70:  i--"];
   n57   [label="71:  if (i == 8)"];
   n58   [label="72:  break;"];
   n59   [label="endif"];
   n60   [label="73:  if (i == 5)"];
   n61   [label="74:  continue;"];
   n62   [label="endif"];
   n63   [label="75:  System.out.println(i)"];
   n64   [label="79:  void main(String[] args)"];
   n65   [label="80:  Test tst = new Test()"];
   n66   [label="81:  tst.setString(tst.getString())"];
   n67   [label="82:  System.out.println(tst.getString())"];
   n68   [label="83:  tst.test1(9)"];
   n69   [label="84:  tst.test2(16)"];
   n70   [label="85:  tst.test3(20, 5)"];
   n71   [label="86:  tst.test4()"];
   n72   [label="87:  System.out.println('End')"];

   n1 -> n2;
   n3 -> n4;
   n4 -> n5   [label="True"];
   n5 -> n6;
   n4 -> n6   [label="False"];
   n6 -> n7;
   n8 -> n9;
   n10 -> n11;
   n11 -> n12;
   n12 -> n13   [label="False"];
   n12 -> n14   [label="True"];
   n14 -> n15   [label="True"];
   n14 -> n16   [label="False"];
   n16 -> n12;
   n13 -> n17;
   n18 -> n19;
   n19 -> n20;
   n20 -> n22   [label="False"];
   n20 -> n23   [label="True"];
   n23 -> n24   [label="True"];
   n24 -> n25;
   n23 -> n26   [label="False"];
   n26 -> n21;
   n25 -> n21;
   n21 -> n20;
   n27 -> n28;
   n28 -> n29;
   n29 -> n32;
   n32 -> n33   [label="True"];
   n33 -> n34;
   n34 -> n31;
   n32 -> n35   [label="False"];
   n35 -> n36;
   n36 -> n30;
   n30 -> n29   [label="True"];
   n30 -> n31   [label="False"];
   n37 -> n38;
   n38 -> n39;
   n39 -> n40   [label="True"];
   n40 -> n41;
   n41 -> n42;
   n42 -> n43;
   n43 -> n44;
   n44 -> n45;
   n45 -> n46;
   n39 -> n47   [label="False"];
   n47 -> n48;
   n48 -> n49;
   n49 -> n50;
   n50 -> n46;
   n51 -> n52;
   n52 -> n53;
   n53 -> n54   [label="False"];
   n53 -> n55   [label="True"];
   n55 -> n56;
   n56 -> n57;
   n57 -> n58   [label="True"];
   n58 -> n54;
   n57 -> n59   [label="False"];
   n59 -> n60;
   n60 -> n61   [label="True"];
   n61 -> n53;
   n60 -> n62   [label="False"];
   n62 -> n63;
   n63 -> n53;
   n64 -> n65;
   n65 -> n66;
   n66 -> n67;
   n67 -> n68;
   n68 -> n69;
   n69 -> n70;
   n70 -> n71;
   n71 -> n72;

}
